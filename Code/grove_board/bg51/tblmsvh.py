"""
---------------------------------------------------------------------
module to convert radiation pulses/min to mSv/h
To calc mSv/h, the graph shown at page 2 of bg51 technical data:
https://www.teviso.com/file/pdf/bg51-data-specification.pdf
has been converted in numerical data using this webtool opensource:
https://automeris.io/WebPlotDigitizer/
WebPlotDigitizer
Web based tool to extract data from plots, images, and maps

Author: Marco Rainone - Wireless Lab ICTP
email: mrainone@ictp.it
Ver: 0.1
Last Update: 01/05/2018
code released with MIT License (MIT)
---------------------------------------------------------------------
"""

# pulses/min
pls_min = [
0.57434404996729       ,
0.692082443005263      ,
0.843821806551955      ,
1.02710313778735       ,
1.25229592803918       ,
1.52429940437687       ,
1.85850268292036       ,
2.26217659035596       ,
2.75815974889453       ,
3.36288742127991       ,
4.09331946105557       ,
4.99917285697982       ,
6.09524358561157       ,
7.43162827747945       ,
9.04580642903583       ,
10.9921083496755       ,
13.4021326782414       ,
16.3405558434556       ,
19.8897872153642       ,
24.2506313368146       ,
29.6671046643989       ,
36.1109135285111       ,
44.1764272565993       ,
53.8621273107361       ,
65.8924440432602       ,
80.6097790558068       ,
98.2835066487992       ,
120.033689870071       ,
146.597198198366       ,
179.641794759766       ,
219.028332994815       ,
267.050386123352       ,
326.697134014916       ,
399.666216263249       ,
488.112525593059       ,
596.132042053572       ,
729.28046448659        ,
889.175509718059       ,
1087.77633643623       ,
1330.73543431917       ,
1619.77627212443       ,
1984.89139089809       ,
2424.14872815027       ,
2955.64434528335       ,
3597.62162775659       ,
4371.68836672213       ,
5330.18285982091       ,
6487.91901061792       ,
7897.11989163383       ,
9612.40460628053       ,
11700.2557366173       ,
14289.527473904        ,
17393.2676211794       ,
20853.458026011        ,
24918.1492757237       ,
29775.1175154149       ,
35519.0698531605       ,
42228.9693857255       ,
50460.1088990111       ,
60194.4268348957       ,
71445.6152855829       ,
84373.5019554012       ,
97816.2386774643       ,
113782.388109157       ,
131689.251002728       ,
147130.933509158       ,
162461.495494363       ,
171434.283706618
]

# pulses/sec
pls_sec = [
0.009572               ,
0.011535               ,
0.014064               ,
0.017118               ,
0.020872               ,
0.025405               ,
0.030975               ,
0.037703               ,
0.045969               ,
0.056048               ,
0.068222               ,
0.083320               ,
0.101587               ,
0.123860               ,
0.150763               ,
0.183202               ,
0.223369               ,
0.272343               ,
0.331496               ,
0.404177               ,
0.494452               ,
0.601849               ,
0.736274               ,
0.897702               ,
1.098207               ,
1.343496               ,
1.638058               ,
2.000561               ,
2.443287               ,
2.994030               ,
3.650472               ,
4.450840               ,
5.444952               ,
6.661104               ,
8.135209               ,
9.935534               ,
12.154674              ,
14.819592              ,
18.129606              ,
22.178924              ,
26.996271              ,
33.081523              ,
40.402479              ,
49.260739              ,
59.960360              ,
72.861473              ,
88.836381              ,
108.131984             ,
131.618665             ,
160.206743             ,
195.004262             ,
238.158791             ,
289.887794             ,
347.557634             ,
415.302488             ,
496.251959             ,
591.984498             ,
703.816156             ,
841.001815             ,
1003.240447            ,
1190.760255            ,
1406.225033            ,
1630.270645            ,
1896.373135            ,
2194.820850            ,
2452.182225            ,
2707.691592            ,
2857.238062
]

# mSv/h
mSv_h = [
0.000123244730611      ,
0.000150116864064      ,
0.000182848165309      ,
0.000222716160276      ,
0.000271276925116      ,
0.00033042582096       ,
0.000402471471211      ,
0.000490225868755      ,
0.000597114130035      ,
0.000727308179784      ,
0.000885889584208      ,
0.00107904788812       ,
0.001314322197271      ,
0.001600895435001      ,
0.001949952758257      ,
0.002375118122211      ,
0.002892986032901      ,
0.003523769242588      ,
0.004292087667826      ,
0.005227929322289      ,
0.006367820770235      ,
0.007756252784244      ,
0.009447416851663      ,
0.011507320306836      ,
0.014016362644231      ,
0.017072473567794      ,
0.020794935256829      ,
0.025329038034152      ,
0.030851751150551      ,
0.037578630020302      ,
0.045772229502036      ,
0.0557523516013        ,
0.067908527569904      ,
0.08271522158726       ,
0.100750349434197      ,
0.122717834956223      ,
0.149475084711033      ,
0.182066453155246      ,
0.221764004540382      ,
0.27011716248381       ,
0.329013185072687      ,
0.400750825887128      ,
0.488130055984639      ,
0.594561348758582      ,
0.72419879313629       ,
0.882102230619456      ,
1.07443474449064       ,
1.30870320932982       ,
1.59405128965938       ,
1.94161632366286       ,
2.36496402140211       ,
2.88061794411326       ,
3.50870443053409       ,
4.27373814219547       ,
5.20557888806729       ,
6.34059707410413       ,
7.72309326601414       ,
9.40702727179373       ,
11.4581242313472       ,
13.9564399153646       ,
16.9994853588947       ,
20.7060327862791       ,
25.2207513754018       ,
30.7198537984223       ,
37.4179739274878       ,
45.5765441471621       ,
55.5139992460217       ,
64.3647901787213
]
    
# function to convert pulses/sec (id=0) or pulses/min (id=1) in mSv/h.
# To derive the mSv/h value from pulses/min, is implemented the binary search of value in list pls_min.
# An index is obtained that allows to identify the extreme points where to pass the linearization line.
def pulses2mSv(id, value):
    global pls_min
    global mSv_h
    
    if id == 0:
        Xpls = pls_sec
    else:
        Xpls = pls_min
        
    # search if the result is out of bounds
    lower_bound = 0
    upper_bound = len(Xpls) - 1
    if Xpls[lower_bound] >= value:
        return 0.0
        # return Xpls[lower_bound]
    if Xpls[upper_bound] <= value:
        return Xpls[upper_bound]
        
    number_guesses = 0
    idxFound = -1
    while True:
        if upper_bound <= lower_bound:
            # idxFound = lower_bound
            index = lower_bound
            break
        index = (lower_bound + upper_bound) // 2
        guess = Xpls[index]
        number_guesses += 1
        if guess == value:
            # found same value
            # idxFound = index
            # break
            return (mSv_h[index])
        if guess > value:
            upper_bound = index - 1
        else:
            lower_bound = index + 1
    
    # calc mSv/h: calc of the line passing through the two points with (index, index+1)
    # index = idxFound
    delta = ( mSv_h[index+1]-mSv_h[index] ) / ( (Xpls[index+1]-Xpls[index]) )
    result = delta * (value - Xpls[index]) + mSv_h[index]
    return result
    